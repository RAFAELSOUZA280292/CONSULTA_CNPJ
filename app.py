import streamlit as st
import requests
import pandas as pd
import time
import re
import datetime
import os

# --- Fun√ß√µes de Utilit√°rio ---
def format_cnpj(cnpj_text):
    """Formata o CNPJ para o padr√£o XX.XXX.XXX/XXXX-XX."""
    clean_cnpj = re.sub(r'\D', '', cnpj_text)
    if len(clean_cnpj) > 14:
        clean_cnpj = clean_cnpj[:14]

    formatted_cnpj = ""
    if len(clean_cnpj) > 0:
        formatted_cnpj += clean_cnpj[0:2]
    if len(clean_cnpj) > 2:
        formatted_cnpj += "." + clean_cnpj[2:5]
    if len(clean_cnpj) > 5:
        formatted_cnpj += "." + clean_cnpj[5:8]
    if len(clean_cnpj) > 8:
        formatted_cnpj += "/" + clean_cnpj[8:12]
    if len(clean_cnpj) > 12:
        formatted_cnpj += "-" + clean_cnpj[12:14]
    return formatted_cnpj

def clean_cnpj(formatted_cnpj):
    """Remove a formata√ß√£o do CNPJ, deixando apenas d√≠gitos."""
    return re.sub(r'\D', '', formatted_cnpj)

# --- L√≥gica de Neg√≥cio ---
def consultar_cnpj_api(cnpj):
    """
    Realiza a consulta de um CNPJ na API open.cnpja.com.
    Implementa um retry b√°sico para status 429.
    """
    clean_cnpj_num = clean_cnpj(cnpj)
    if not clean_cnpj_num.isdigit() or len(clean_cnpj_num) != 14:
        return {"error": "CNPJ inv√°lido. Digite 14 d√≠gitos num√©ricos."}

    url = f"https://open.cnpja.com/office/{clean_cnpj_num}"
    try:
        response = requests.get(url)

        if response.status_code == 200:
            return response.json()
        elif response.status_code == 429:
            st.warning("Muitas requisi√ß√µes (429). Tentando novamente em 60 segundos...")
            time.sleep(60) # Espera antes de tentar novamente
            return consultar_cnpj_api(cnpj) # Tenta novamente
        elif response.status_code == 404:
            return {"error": f"CNPJ {clean_cnpj_num} n√£o encontrado ou inv√°lido na base da API."}
        else:
            return {"error": f"Erro ao consultar {clean_cnpj_num}: Status {response.status_code}"}
    except requests.exceptions.RequestException as e:
        return {"error": f"Erro de conex√£o: {e}"}

def extract_data_for_display(response):
    """
    Extrai e formata os dados da resposta da API para exibi√ß√£o na GUI.
    Esta fun√ß√£o DEVE ser a vers√£o COMPLETA que voc√™ tinha no seu app PySide6
    para garantir que todos os campos necess√°rios estejam presentes no dicion√°rio 'extracted'.
    """
    if "error" in response:
        return None, response["error"]

    data = response

    # Comece com o dicion√°rio extracted vazio
    extracted = {}

    # --- Dados da Empresa ---
    company = data.get('company', {})
    simples = company.get('simples', {})
    simei = company.get('simei', {})
    nature = company.get('nature', {})
    size = company.get('size', {})
    status_info = data.get('status', {})
    status_special = data.get('specialStatus', {})

    extracted["CNPJ"] = data.get('taxId', 'N/A')
    extracted["Raz√£o Social"] = company.get('name', 'N/A')
    extracted["Nome Fantasia"] = data.get('alias', 'N/A')

    # Data de Abertura
    founded_str = data.get('founded')
    if founded_str:
        try:
            dt_object = datetime.datetime.strptime(founded_str, '%Y-%m-%d')
            extracted["Data de Abertura"] = dt_object.strftime("%d/%m/%Y")
        except ValueError:
            extracted["Data de Abertura"] = 'N/A'
    else:
        extracted["Data de Abertura"] = 'N/A'

    extracted["Situa√ß√£o Cadastral"] = status_info.get('text', 'N/A')

    # Data Situa√ß√£o Cadastral
    status_date_str = data.get('statusDate')
    if status_date_str:
        try:
            dt_object = datetime.datetime.strptime(status_date_str, '%Y-%m-%d')
            extracted["Data Situa√ß√£o Cadastral"] = dt_object.strftime("%d/%m/%Y")
        except ValueError:
            extracted["Data Situa√ß√£o Cadastral"] = 'N/A'
    else:
        extracted["Data Situa√ß√£o Cadastral"] = 'N/A'

    extracted["Motivo Situa√ß√£o Cadastral"] = status_info.get('reason', 'N/A')
    extracted["Situa√ß√£o Especial"] = status_special.get('text', 'N/A')
    extracted["Data Situa√ß√£o Especial"] = status_special.get('date', 'N/A') # Data ainda n√£o formatada

    extracted["Natureza Jur√≠dica"] = nature.get('text', 'N/A')
    extracted["Porte da Empresa"] = size.get('text', 'N/A')

    # Capital Social com formata√ß√£o comercial
    equity_value = company.get('equity')
    if equity_value is not None:
        try:
            equity_str = f"{float(equity_value):.2f}"
            parts = equity_str.split('.')
            integer_part = parts[0]
            decimal_part = parts[1]
            formatted_integer_part = re.sub(r'(\d)(?=(\d{3})+(?!\d))', r'\1.', integer_part)
            extracted["Capital Social"] = f"R$ {formatted_integer_part},{decimal_part}"
        except (ValueError, TypeError):
            extracted["Capital Social"] = 'N/A'
    else:
        extracted["Capital Social"] = 'N/A'

    # Optante Simples Nacional com ‚úî/X
    simples_optant = simples.get('optant', False)
    extracted["Optante Simples Nacional"] = f"{'‚úî Sim' if simples_optant else 'X N√£o'}"
    extracted["In√≠cio Simples Nacional"] = simples.get('since', 'N/A')

    # Optante SIMEI com ‚úî/X
    simei_optant = simei.get('optant', False)
    extracted["Optante SIMEI"] = f"{'‚úî Sim' if simei_optant else 'X N√£o'}"
    extracted["In√≠cio SIMEI"] = simei.get('since', 'N/A')

    # √öltima Atualiza√ß√£o Dados com formata√ß√£o de data/hora
    updated_str = data.get('updated')
    if updated_str:
        try:
            dt_object = datetime.datetime.fromisoformat(updated_str.replace('Z', '+00:00'))
            extracted["√öltima Atualiza√ß√£o Dados"] = dt_object.strftime("%d/%m/%Y - %H:%M")
        except ValueError:
            extracted["√öltima Atualiza√ß√£o Dados"] = 'N/A'
    else:
        extracted["√öltima Atualiza√ß√£o Dados"] = 'N/A'

    # Endere√ßo
    address_data = data.get('address')
    if address_data and isinstance(address_data, dict):
        extracted["Logradouro"] = address_data.get('street', 'N/A')
        extracted["N√∫mero"] = address_data.get('number', 'N/A')
        extracted["Complemento"] = address_data.get('details', 'N/A')
        extracted["Bairro"] = address_data.get('district', 'N/A')
        extracted["Munic√≠pio"] = address_data.get('city', 'N/A')
        extracted["UF"] = address_data.get('state', 'N/A')
        extracted["CEP"] = address_data.get('zip', 'N/A')
        extracted["Pa√≠s"] = address_data.get('country', {}).get('name', 'N/A')
    else:
        extracted["Logradouro"] = 'N/A'
        extracted["N√∫mero"] = 'N/A'
        extracted["Complemento"] = 'N/A'
        extracted["Bairro"] = 'N/A'
        extracted["Munic√≠pio"] = 'N/A'
        extracted["UF"] = 'N/A'
        extracted["CEP"] = 'N/A'
        extracted["Pa√≠s"] = 'N/A'

    # Atividades Econ√¥micas
    main_activity = data.get('mainActivity', {})
    extracted["CNAE Principal"] = f"{main_activity.get('id', 'N/A')} - {main_activity.get('text', 'N/A')}"

    side_activities = data.get('sideActivities', [])
    cnaes_secundarios_list = []
    for activity in side_activities:
        cnaes_secundarios_list.append(f"{activity.get('id', 'N/A')} - {activity.get('text', 'N/A')}")
    extracted["CNAEs Secund√°rios"] = "\n".join(cnaes_secundarios_list) if cnaes_secundarios_list else "N/A"

    # Contatos
    phones = data.get('phones', [])
    phone_list = []
    for phone in phones:
        phone_list.append(f"({phone.get('area', 'N/A')}) {phone.get('number', 'N/A')} ({phone.get('type', 'N/A')})")
    extracted["Telefones"] = "\n".join(phone_list) if phone_list else "N/A"

    emails = data.get('emails', [])
    email_list = []
    for email in emails:
        email_list.append(email.get('address', 'N/A'))
    extracted["Emails"] = "\n".join(email_list) if email_list else "N/A"

    # S√≥cios
    members = company.get('members', [])
    members_info_list = []
    if members:
        for member in members:
            person = member.get('person', {})
            role = member.get('role', {})
            member_details = []
            member_details.append(f"Nome: {person.get('name', 'N/A')}")
            member_details.append(f"CPF: {person.get('taxId', 'N/A')}")
            member_details.append(f"Idade: {person.get('age', 'N/A')}")
            member_details.append(f"Fun√ß√£o: {role.get('text', 'N/A')}")
            members_info_list.append("\n".join(member_details))
        extracted["S√≥cios"] = "\n\n".join(members_info_list)
    else:
        extracted["S√≥cios"] = "N/A"

    # Inscri√ß√µes Estaduais (SINTEGRA)
    registrations = data.get('registrations', [])
    formatted_registrations_list = []
    if registrations:
        for reg in registrations:
            ie_number = reg.get('number', 'N/A')
            uf = reg.get('state', 'N/A')
            enabled = "SIM" if reg.get('enabled', False) else "N√ÉO"
            status_text = reg.get('status', {}).get('text', 'N/A')
            type_text = reg.get('type', {}).get('text', 'N/A')

            reg_info = (
                f"N¬∫ IE: {ie_number}\n"
                f"UF: {uf}\n"
                f"Habilitada: {enabled}\n"
                f"Status: {status_text}\n"
                f"TIPO: {type_text}"
            )
            formatted_registrations_list.append(reg_info)
        extracted["Inscricoes Estaduais"] = "\n\n".join(formatted_registrations_list)
    else:
        extracted["Inscricoes Estaduais"] = "N/A"

    return extracted, None

# --- Interface Streamlit ---
st.set_page_config(page_title="Consulta CNPJ", layout="centered")

st.title("üîé Consulta de Dados Cadastrais CNPJ")
st.markdown("Desenvolvido por Zen.Ai TAX (adaptado para Streamlit)")

cnpj_input = st.text_input("Digite o CNPJ para consultar:", max_chars=18, help="Apenas n√∫meros, ou no formato XX.XXX.XXX/XXXX-XX", key="cnpj_input_field")

# Formata√ß√£o autom√°tica do CNPJ (visual, n√£o altera o valor do input em si)
display_cnpj = format_cnpj(cnpj_input)
if cnpj_input and clean_cnpj(cnpj_input) != clean_cnpj(display_cnpj):
    st.info(f"CNPJ formatado: **{display_cnpj}**")

if st.button("Consultar CNPJ", key="consult_button"):
    if not cnpj_input:
        st.warning("Por favor, digite um CNPJ para consultar.")
    else:
        cleaned_cnpj = clean_cnpj(cnpj_input)
        if len(cleaned_cnpj) != 14 or not cleaned_cnpj.isdigit():
            st.error("CNPJ inv√°lido. Digite 14 d√≠gitos num√©ricos.")
        else:
            with st.spinner("Consultando CNPJ..."):
                api_response = consultar_cnpj_api(cleaned_cnpj)
            
            if "error" in api_response:
                st.error(f"Erro na consulta: {api_response['error']}")
                st.session_state.last_consulted_data = {} # Limpa dados anteriores
                st.session_state.api_raw_response = {}
            else:
                extracted_data, error_msg = extract_data_for_display(api_response)
                if error_msg:
                    st.error(f"Erro ao processar dados: {error_msg}")
                    st.session_state.last_consulted_data = {}
                    st.session_state.api_raw_response = {}
                else:
                    st.success("Consulta conclu√≠da com sucesso!")
                    # Armazena os dados no session_state
                    st.session_state.last_consulted_data = extracted_data
                    st.session_state.api_raw_response = api_response # Guarda a resposta bruta para TXT/Excel

# Exibe os resultados se houver dados consultados
if "last_consulted_data" in st.session_state and st.session_state.last_consulted_data:
    st.subheader("Dados do CNPJ")

    # Usando st.tabs para organizar os dados, simulando as abas PySide6
    tab_general, tab_address, tab_activities, tab_partners, tab_registrations = st.tabs([
        "Geral", "Endere√ßo", "Atividades", "S√≥cios", "IEs"
    ])

    with tab_general:
        st.write(f"**CNPJ:** {st.session_state.last_consulted_data.get('CNPJ', 'N/A')}")
        st.write(f"**Raz√£o Social:** {st.session_state.last_consulted_data.get('Raz√£o Social', 'N/A')}")
        st.write(f"**Nome Fantasia:** {st.session_state.last_consulted_data.get('Nome Fantasia', 'N/A')}")
        st.write(f"**Data de Abertura:** {st.session_state.last_consulted_data.get('Data de Abertura', 'N/A')}")
        st.write(f"**Situa√ß√£o Cadastral:** {st.session_state.last_consulted_data.get('Situa√ß√£o Cadastral', 'N/A')}")
        
        # --- CAMPOS ADICIONADOS / CORRIGIDOS NA EXIBI√á√ÉO ---
        st.write(f"**Data da Situa√ß√£o Cadastral:** {st.session_state.last_consulted_data.get('Data Situa√ß√£o Cadastral', 'N/A')}")
        st.write(f"**Motivo Situa√ß√£o Cadastral:** {st.session_state.last_consulted_data.get('Motivo Situa√ß√£o Cadastral', 'N/A')}")
        st.write(f"**Situa√ß√£o Especial:** {st.session_state.last_consulted_data.get('Situa√ß√£o Especial', 'N/A')}")
        # A data da Situa√ß√£o Especial n√£o est√° formatada na extra√ß√£o, vamos formatar aqui se existir e for uma string
        data_especial_str = st.session_state.last_consulted_data.get('Data Situa√ß√£o Especial', 'N/A')
        if data_especial_str != 'N/A':
            try:
                dt_object_esp = datetime.datetime.strptime(data_especial_str, '%Y-%m-%d')
                data_especial_str = dt_object_esp.strftime("%d/%m/%Y")
            except ValueError:
                pass # Mant√©m como est√° se n√£o for uma data v√°lida
        st.write(f"**Data Situa√ß√£o Especial:** {data_especial_str}")
        
        st.write(f"**Natureza Jur√≠dica:** {st.session_state.last_consulted_data.get('Natureza Jur√≠dica', 'N/A')}")
        st.write(f"**Porte da Empresa:** {st.session_state.last_consulted_data.get('Porte da Empresa', 'N/A')}")
        st.write(f"**Capital Social:** {st.session_state.last_consulted_data.get('Capital Social', 'N/A')}")
        st.write(f"**Optante Simples Nacional:** {st.session_state.last_consulted_data.get('Optante Simples Nacional', 'N/A')}")
        st.write(f"**Optante SIMEI:** {st.session_state.last_consulted_data.get('Optante SIMEI', 'N/A')}")
        st.write(f"**In√≠cio Simples Nacional:** {st.session_state.last_consulted_data.get('In√≠cio Simples Nacional', 'N/A')}")
        st.write(f"**In√≠cio SIMEI:** {st.session_state.last_consulted_data.get('In√≠cio SIMEI', 'N/A')}")
        st.write(f"**√öltima Atualiza√ß√£o Dados:** {st.session_state.last_consulted_data.get('√öltima Atualiza√ß√£o Dados', 'N/A')}")

    with tab_address:
        st.write(f"**Logradouro:** {st.session_state.last_consulted_data.get('Logradouro', 'N/A')}")
        st.write(f"**N√∫mero:** {st.session_state.last_consulted_data.get('N√∫mero', 'N/A')}")
        st.write(f"**Complemento:** {st.session_state.last_consulted_data.get('Complemento', 'N/A')}")
        st.write(f"**Bairro:** {st.session_state.last_consulted_data.get('Bairro', 'N/A')}")
        st.write(f"**Munic√≠pio:** {st.session_state.last_consulted_data.get('Munic√≠pio', 'N/A')}")
        st.write(f"**UF:** {st.session_state.last_consulted_data.get('UF', 'N/A')}")
        st.write(f"**CEP:** {st.session_state.last_consulted_data.get('CEP', 'N/A')}")
        st.write(f"**Pa√≠s:** {st.session_state.last_consulted_data.get('Pa√≠s', 'N/A')}")

    with tab_activities:
        st.write(f"**CNAE Principal:** {st.session_state.last_consulted_data.get('CNAE Principal', 'N/A')}")
        st.write(f"**CNAEs Secund√°rios:**")
        st.markdown(st.session_state.last_consulted_data.get("CNAEs Secund√°rios", "N/A"))
        st.write(f"**Telefones:**")
        st.markdown(st.session_state.last_consulted_data.get("Telefones", "N/A"))
        st.write(f"**Emails:**")
        st.markdown(st.session_state.last_consulted_data.get("Emails", "N/A"))


    with tab_partners:
        st.write(f"**S√≥cios:**")
        st.markdown(st.session_state.last_consulted_data.get('S√≥cios', 'N/A'))

    with tab_registrations:
        st.write(f"**Inscri√ß√µes Estaduais:**")
        st.markdown(st.session_state.last_consulted_data.get("Inscricoes Estaduais", "N/A"))

    st.markdown("---")
    st.subheader("Op√ß√µes de Exporta√ß√£o")
    
    # Bot√£o Salvar em Excel
    if st.button("üíæ Salvar em Excel", key="save_excel_button"):
        if st.session_state.last_consulted_data:
            # Para exportar todos os campos, incluindo aqueles com m√∫ltiplas linhas (CNAEs Sec., S√≥cios, IEs),
            # voc√™ precisar√° trat√°-los para que apare√ßam em uma √∫nica c√©lula do Excel.
            # Uma forma √© joinar com "\n" ou ", "
            
            # Cria uma c√≥pia para modifica√ß√£o antes de criar o DataFrame
            data_for_excel = st.session_state.last_consulted_data.copy()

            # Trata campos que podem ter m√∫ltiplas linhas no display para uma √∫nica linha no Excel
            for key_multi_line in ["CNAEs Secund√°rios", "Telefones", "Emails", "S√≥cios", "Inscricoes Estaduais"]:
                if key_multi_line in data_for_excel and isinstance(data_for_excel[key_multi_line], str):
                    data_for_excel[key_multi_line] = data_for_excel[key_multi_line].replace("\n", " | ") # Substitui quebras de linha por |

            df_to_export = pd.DataFrame([data_for_excel])
            
            # Reorganiza as colunas na ordem desejada
            # As chaves em data_for_excel ser√£o as mesmas do COLUMN_ORDER que voc√™ j√° tinha no PySide6
            column_order = [
                # Dados Gerais
                "CNPJ", "Raz√£o Social", "Nome Fantasia", "Data de Abertura",
                "Situa√ß√£o Cadastral", "Data Situa√ß√£o Cadastral", "Motivo Situa√ß√£o Cadastral",
                "Situa√ß√£o Especial", "Data Situa√ß√£o Especial",
                "Natureza Jur√≠dica", "Porte da Empresa", "Capital Social", "Optante Simples Nacional",
                "In√≠cio Simples Nacional", "Optante SIMEI", "In√≠cio SIMEI",
                "√öltima Atualiza√ß√£o Dados",
                # Endere√ßo
                "Logradouro", "N√∫mero", "Complemento", "Bairro", "Munic√≠pio",
                "UF", "CEP", "Pa√≠s",
                # Atividades e Contatos
                "CNAE Principal", "CNAEs Secund√°rios", "Telefones", "Emails", "S√≥cios",
                # SINTEGRA
                "Inscricoes Estaduais"
            ]
            # Filtra apenas as colunas que realmente existem no DataFrame
            existing_columns = [col for col in column_order if col in df_to_export.columns]
            df_to_export = df_to_export[existing_columns]


            # Cria o arquivo Excel em mem√≥ria
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df_to_export.to_excel(writer, index=False, sheet_name='Dados CNPJ')
            processed_data = output.getvalue()


            st.download_button(
                label="Clique para Baixar Excel",
                data=processed_data,
                file_name=f"CNPJ_{clean_cnpj(st.session_state.last_consulted_data['CNPJ'])}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key="download_excel"
            )
        else:
            st.warning("Nenhum dado para salvar em Excel.")

    # Bot√£o Gerar TXT CNPJ
    if st.button("üìÑ Gerar Cart√£o CNPJ TXT", key="generate_txt_button"):
        if st.session_state.api_raw_response:
            # Aqui voc√™ chamar√° a sua fun√ß√£o `generate_cnpj_text_report`
            # adaptada para retornar a string TXT em vez de salvar no disco.
            # Mova a l√≥gica de `generate_cnpj_text_report` para uma nova fun√ß√£o
            # que retorna o conte√∫do do TXT como uma string.
            
            # Reutilizando a l√≥gica do PySide6 para gerar o conte√∫do TXT
            # Voc√™ precisaria mover a fun√ß√£o generate_cnpj_text_report_content para fora da classe CnpjApp
            # ou criar uma fun√ß√£o helper aqui que replique a l√≥gica.
            
            txt_content = generate_cnpj_text_report_content(st.session_state.api_raw_response)

            st.download_button(
                label="Clique para Baixar Cart√£o CNPJ TXT",
                data=txt_content.encode('utf-8'),
                file_name=f"Cartao_CNPJ_{clean_cnpj(st.session_state.last_consulted_data['CNPJ'])}.txt",
                mime="text/plain",
                key="download_txt"
            )
        else:
            st.warning("Nenhum dado para gerar Cart√£o CNPJ TXT.")

# --- HELPERS PARA O DOWNLOAD TXT E EXCEL ---
import io # Adicionar no in√≠cio do arquivo junto com os outros imports

def generate_cnpj_text_report_content(api_raw_response):
    """
    Gera o conte√∫do de texto para o relat√≥rio do CNPJ,
    usando a estrutura da sua fun√ß√£o `generate_cnpj_text_report` do PySide6.
    Retorna uma string.
    """
    data = api_raw_response
    company = data.get('company', {})
    address = data.get('address', {})
    main_activity = data.get('mainActivity', {})
    side_activities = data.get('sideActivities', [])
    phones = data.get('phones', [])
    emails = data.get('emails', [])
    members = company.get('members', [])
    registrations = data.get('registrations', [])
    simples = company.get('simples', {})
    simei = company.get('simei', {})
    status_info = data.get('status', {})
    status_special = data.get('specialStatus', {})

    # Formata√ß√£o de campos para TXT (reutilizando sua l√≥gica)
    cnpj_formatted = format_cnpj(data.get('taxId', 'N/A'))
    razao_social = company.get('name', 'N/A')
    nome_fantasia = data.get('alias', 'N/A')
    data_abertura = datetime.datetime.strptime(data.get('founded', '1900-01-01'), '%Y-%m-%d').strftime('%d/%m/%Y') if data.get('founded') else 'N/A'
    situacao_cadastral = status_info.get('text', 'N/A')
    data_situacao_cadastral = datetime.datetime.strptime(data.get('statusDate', '1900-01-01'), '%Y-%m-%d').strftime('%d/%m/%Y') if data.get('statusDate') else 'N/A'
    motivo_situacao_cadastral = status_info.get('reason', 'N/A')
    situacao_especial = status_special.get('text', 'N/A')
    data_situacao_especial = datetime.datetime.strptime(status_special.get('date', '1900-01-01'), '%Y-%m-%d').strftime('%d/%m/%Y') if status_special.get('date') else 'N/A'
    natureza_juridica = company.get('nature', {}).get('text', 'N/A')
    porte_empresa = company.get('size', {}).get('text', 'N/A')

    equity_value = company.get('equity')
    if equity_value is not None:
        try:
            equity_str = f"{float(equity_value):.2f}"
            parts = equity_str.split('.')
            integer_part = parts[0]
            decimal_part = parts[1]
            formatted_capital_social = f"R$ {re.sub(r'(\d)(?=(\d{3})+(?!\d))', r'\1.', integer_part)},{decimal_part}"
        except (ValueError, TypeError):
            formatted_capital_social = 'N/A'
    else:
        formatted_capital_social = 'N/A'

    optante_simples = "SIM" if simples.get('optant', False) else "N√ÉO"
    data_opcao_simples = simples.get('since', 'N/A')
    optante_simei = "SIM" if simei.get('optant', False) else "N√ÉO"
    data_opcao_simei = simei.get('since', 'N/A')

    # Endere√ßo
    logradouro = address.get('street', 'N/A')
    numero = address.get('number', 'N/A')
    complemento = address.get('details', 'N/A')
    bairro = address.get('district', 'N/A')
    cep = address.get('zip', 'N/A')
    municipio = address.get('city', 'N/A')
    uf_endereco = address.get('state', 'N/A')
    pais_endereco = address.get('country', {}).get('name', 'N/A')

    # CNAE Principal
    cnae_principal_id = main_activity.get('id', 'N/A')
    cnae_principal_text = main_activity.get('text', 'N/A')
    cnae_principal_formatted = f"{cnae_principal_id} - {cnae_principal_text}"

    # CNAEs Secund√°rios
    cnaes_secundarios_txt = []
    if side_activities:
        for activity in side_activities:
            cnaes_secundarios_txt.append(f"{activity.get('id', 'N/A')} - {activity.get('text', 'N/A')}")
    else:
        cnaes_secundarios_txt.append("N/A")

    # Telefones
    phones_txt = []
    if phones:
        for phone in phones:
            phones_txt.append(f"({phone.get('area', 'N/A')}) {phone.get('number', 'N/A')} ({phone.get('type', 'N/A')})")
    else:
        phones_txt.append("N/A")

    # Emails
    emails_txt = []
    if emails:
        for email in emails:
            emails_txt.append(email.get('address', 'N/A'))
    else:
        emails_txt.append("N/A")

    # Quadro de S√≥cios e Administradores (QSA)
    qsa_txt = []
    if members:
        for member in members:
            person = member.get('person', {})
            role = member.get('role', {})
            qsa_txt.append(
                f"Nome: {person.get('name', 'N/A')}\n"
                f"CPF/CNPJ: {person.get('taxId', 'N/A')}\n"
                f"Fun√ß√£o: {role.get('text', 'N/A')}\n"
                f"Desde: {member.get('since', 'N/A')}"
            )
    else:
        qsa_txt.append("N/A")

    # Inscri√ß√µes Estaduais
    registrations_txt = []
    if registrations:
        for reg in registrations:
            ie_number = reg.get('number', 'N/A')
            uf_ie = reg.get('state', 'N/A')
            enabled_ie = "SIM" if reg.get('enabled', False) else "N√ÉO"
            status_ie = reg.get('status', {}).get('text', 'N/A')
            type_ie = reg.get('type', {}).get('text', 'N/A')
            registrations_txt.append(
                f"N¬∫ IE: {ie_number} (UF: {uf_ie})\n"
                f"Habilitada: {enabled_ie}\n"
                f"Status: {status_ie}\n"
                f"Tipo: {type_ie}"
            )
    else:
        registrations_txt.append("N/A")

    # --- Montando o conte√∫do TXT ---
    separator_line = "-" * 80 + "\n"
    text_content = separator_line
    text_content += f"|{' ' * 26}CART√ÉO CNPJ - LAVORATAX{' ' * 27}|\n"
    text_content += separator_line
    text_content += f"| EMITIDO EM: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n"
    text_content += separator_line + "\n"

    # DADOS CADASTRAIS
    text_content += separator_line
    text_content += f"| DADOS CADASTRAIS\n"
    text_content += separator_line
    text_content += f"| N√öMERO DE INSCRI√á√ÉO: {cnpj_formatted}\n"
    text_content += f"| DATA DE ABERTURA: {data_abertura}\n"
    text_content += f"| NOME EMPRESARIAL: {razao_social}\n"
    text_content += f"| NOME FANTASIA: {nome_fantasia}\n"
    text_content += f"| C√ìDIGO E DESCRI√á√ÉO DA ATIVIDADE ECON√îMICA PRINCIPAL: {cnae_principal_formatted}\n"

    text_content += f"| C√ìDIGO(S) E DESCRI√á√ÉO(√ïES) DAS ATIVIDADES ECON√îMICAS SECUND√ÅRIAS:\n"
    for cnae in cnaes_secundarios_txt:
        text_content += f"|   - {cnae}\n"
    text_content += f"| C√ìDIGO E DESCRI√á√ÉO DA NATUREZA JUR√çDICA: {natureza_juridica}\n"
    text_content += f"| PORTE DA EMPRESA: {porte_empresa}\n"
    text_content += f"| CAPITAL SOCIAL: {formatted_capital_social}\n"
    text_content += separator_line + "\n"

    # ENDERE√áO
    text_content += separator_line
    text_content += f"| ENDERE√áO\n"
    text_content += separator_line
    text_content += f"| LOGRADOURO: {logradouro}\n"
    text_content += f"| N√öMERO: {numero}\n"
    text_content += f"| COMPLEMENTO: {complemento}\n"
    text_content += f"| CEP: {cep}\n"
    text_content += f"| BAIRRO/DISTRITO: {bairro}\n"
    text_content += f"| MUNIC√çPIO: {municipio}\n"
    text_content += f"| UF: {uf_endereco}\n"
    text_content += f"| PA√çS: {pais_endereco}\n"
    text_content += separator_line + "\n"

    # SITUA√á√ÉO CADASTRAL
    text_content += separator_line
    text_content += f"| SITUA√á√ÉO CADASTRAL\n"
    text_content += separator_line
    text_content += f"| SITUA√á√ÉO CADASTRAL: {situacao_cadastral}\n"
    text_content += f"| DATA DA SITUA√á√ÉO CADASTRAL: {data_situacao_cadastral}\n"
    text_content += f"| MOTIVO DE SITUA√á√ÉO CADASTRAL: {motivo_situacao_cadastral}\n"
    text_content += f"| SITUA√á√ÉO ESPECIAL: {situacao_especial}\n"
    text_content += f"| DATA DA SITUA√á√ÉO ESPECIAL: {data_situacao_especial}\n"
    text_content += separator_line + "\n"

    # REGIMES TRIBUT√ÅRIOS
    text_content += separator_line
    text_content += f"| REGIMES TRIBUT√ÅRIOS\n"
    text_content += separator_line
    text_content += f"| OP√á√ÉO PELO SIMPLES NACIONAL: {optante_simples}\n"
    text_content += f"| DATA DE OP√á√ÉO PELO SIMPLES: {data_opcao_simples}\n"
    text_content += f"| OP√á√ÉO PELO SIMEI: {optante_simei}\n"
    text_content += f"| DATA DE OP√á√ÉO PELO SIMEI: {data_opcao_simei}\n"
    text_content += separator_line + "\n"

    # CONTATOS
    text_content += separator_line
    text_content += f"| CONTATOS\n"
    text_content += separator_line
    text_content += f"| TELEFONES:\n"
    for phone in phones_txt:
        text_content += f"|   - {phone}\n"
    text_content += f"| EMAILS:\n"
    for email in emails_txt:
        text_content += f"|   - {email}\n"
    text_content += separator_line + "\n"

    # INSCRI√á√ïES ESTADUAIS
    text_content += separator_line
    text_content += f"| INSCRI√á√ïES ESTADUAIS\n"
    text_content += separator_line
    if registrations_txt[0] == "N/A":
        text_content += f"|   N/A\n"
    else:
        for i, reg_block in enumerate(registrations_txt):
            for line in reg_block.split('\n'):
                text_content += f"| {line}\n"
            if i < len(registrations_txt) - 1:
                text_content += f"|\n"
    text_content += separator_line + "\n"

    # QUADRO DE S√ìCIOS E ADMINISTRADORES (QSA)
    text_content += separator_line
    text_content += f"| QUADRO DE S√ìCIOS E ADMINISTRADORES (QSA)\n"
    text_content += separator_line
    if qsa_txt[0] == "N/A":
        text_content += f"|   N/A\n"
    else:
        for i, member_block in enumerate(qsa_txt):
            for line in member_block.split('\n'):
                text_content += f"| {line}\n"
            if i < len(qsa_txt) - 1:
                text_content += f"|\n"
    text_content += separator_line + "\n"

    # FOOTER
    text_content += separator_line
    text_content += f"| A validade e autenticidade deste documento podem ser comprovadas no site da Receita Federal do Brasil.\n"
    text_content += f"| Este √© um documento gerado automaticamente pela ferramenta Zen.Ai TAX.\n"
    text_content += separator_line
    return text_content
